{"version":3,"sources":["component/Map.js","component/Menu.js","routes/Navigation.js","App.js","index.js"],"names":["kakao","window","Map","lat","lng","zoom","arrLat","arrLng","arrFacilityName","options","useEffect","center","maps","LatLng","level","container","document","getElementById","map","i","length","markers","marker","Marker","position","setMap","infowindows","infowindow","CustomOverlay","content","event","addListener","makeOverListener","makeOutListener","id","className","Menu","sido","city","centerName","facilityName","zipCode","address","centerType","zom","latt","lngg","facilityNamee","useState","mode","state","setState","push","onClick","Navigation","info","isLoading","datas","data","KEY","App","covid","getWeather","a","axios","get","this","path","render","React","Component","ReactDOM"],"mappings":"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","file":"static/js/main.7374e536.chunk.js","sourcesContent":["import React, { useEffect} from 'react';\r\nimport './component.css';\r\nconst { kakao } = window;\r\n\r\n\r\n\r\nexport default function Map({lat, lng, zoom, arrLat, arrLng, arrFacilityName}){\r\n\r\nlet options =null;\r\n\r\n    useEffect(() => {\r\n\r\n        //도시 선택과 센터선택에 따라 맵을 축소 or 확대\r\n        if(zoom===true){\r\n            options = {\r\n                center: new kakao.maps.LatLng(lng, lat ), // 지도의 중심좌표\r\n                level: 5,  // 지도의 확대 레벨\r\n            };\r\n        }else if(zoom===false){\r\n            options = {\r\n                center: new kakao.maps.LatLng(lng, lat ), // 지도의 중심좌표\r\n                level: 10,  // 지도의 확대 레벨\r\n            };\r\n        }\r\n        \r\n        const container = document.getElementById('map'); //맵이 생성 되는 공간\r\n        const map = new kakao.maps.Map(container, options); //맵생성\r\n\r\n        //여러개의 마커의 위치와 인포드로우를 생성\r\n        for (let i = 0; i < arrLat.length; i++) {\r\n        let markers =  new kakao.maps.LatLng(arrLng[i], arrLat[i] ); //마커의 위치\r\n        let marker = new kakao.maps.Marker({ position : markers}); //마커생성\r\n            marker.setMap(map);//마커를 맴에 표시\r\n\r\n        let infowindows = '<div class=\"customoverlay\">' + arrFacilityName[i] + '</div>';//인포드로우 정의\r\n        let infowindow = new kakao.maps.CustomOverlay({//커스텀한 인포드로우의 정보 \r\n            position: markers,\r\n            content: infowindows   \r\n        });\r\n        \r\n        //마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다\r\n        // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n        kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n        kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n        }\r\n\r\n        //커스텀한 인포윈도우를 표시하는 클로저를 만드는 함수입니다 \r\n        function makeOverListener(map, marker, infowindow) {\r\n            return function() {\r\n                infowindow.setMap(map);\r\n            };\r\n        }\r\n        \r\n        //커스텀한 인포윈도우를 닫는 클로저를 만드는 함수입니다 \r\n        function makeOutListener(infowindow) {\r\n            return function() {\r\n                infowindow.setMap(null); \r\n            };\r\n        }\r\n        \r\n    }, [lng, lat]);//위도와 경도가 바뀔때마다 동작\r\n\r\n    return (\r\n        <div id=\"map\" className=\"map\">\r\n       \r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect }  from \"react\";\r\nimport './component.css';\r\nimport Map from \"./Map\";\r\n\r\n\r\nlet arrLat=[100];\r\nlet arrLng=[100];\r\nlet arrFacilityName=[100];\r\nexport default function Menu({id,sido,city,centerName,facilityName,zipCode,address,centerType, lat, lng, zom}){\r\n    const latt = lat;\r\n    const lngg = lng;\r\n    const facilityNamee =facilityName;\r\n    const [ state, setState ] = useState({ \r\n        lat:latt,\r\n        lng:lngg,\r\n        mode:true,\r\n        zoom:zom,\r\n        facilityName:facilityNamee,\r\n    }); \r\n\r\n\r\n    useEffect(() => {        \r\n        arrLat=[];\r\n        arrLng =[];\r\n        arrFacilityName =[];\r\n    }, [city.mode]);\r\n\r\n    const toogle=()=>{\r\n        if(state.mode===true){\r\n            setState({...state, lat:lat-0.000001, lng:lng-0.000001,mode:false, zoom:true})\r\n        }else{\r\n        setState({...state, lat:lat, lng:lng,mode:true, zoom:true})\r\n        }\r\n     }\r\n\r\n\r\n    if(sido !== city.mode){\r\n        sido=null;\r\n        centerName=null;\r\n        facilityName=\"\";\r\n        address=null;\r\n        centerType=null;\r\n        lat=null;\r\n        lng=null;\r\n        return(\r\n            <div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    if(sido === city.mode){\r\n        arrLat.push(state.lat);\r\n        arrLng.push(state.lng);\r\n        arrFacilityName.push(state.facilityName);\r\n        return(\r\n            <div className=\"center\">\r\n                <div className=\"center_info\" onClick={toogle}> \r\n                    <div>\r\n                        <div className=\"centerName\">\r\n                                {centerName} \r\n                            </div>\r\n                            <div className=\"facilityName\">\r\n                                [{facilityName}]\r\n                            </div>\r\n                        </div> \r\n                    </div>\r\n                <div>\r\n                    <Map lat={state.lat} lng={state.lng} zoom={state.zoom} arrLat={arrLat} arrLng={arrLng} arrFacilityName={arrFacilityName}></Map>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React, { useState }  from \"react\";\r\nimport Menu from \"../component/Menu\"\r\nimport './routes.css';\r\n\r\n\r\n\r\nexport default function Navigation({info,isLoading}){\r\n    let array=[];\r\n    const datas = info;\r\n    const [ state, setState ] = useState({ \r\n        mode:null,\r\n        zom:false, \r\n    }); //켈린더 와 매표의 초기모드\r\n\r\n    return(\r\n        <div className=\"navigation\">\r\n            <div className=\"area\">\r\n                <div className=\"city\">\r\n                    <div onClick={()=>setState({ state, mode:\"서울특별시\"})}>서울</div>\r\n                    <div onClick={()=>setState({ state, mode:\"인천광역시\"})}>인천</div>\r\n                    <div onClick={()=>setState({ state, mode:\"세종특별자치시\"})}>세종</div>\r\n                    <div onClick={()=>setState({ state, mode:\"대전광역시\"})}>대전</div>\r\n                    <div onClick={()=>setState({ state, mode:\"대구광역시\"})}>대구</div>\r\n                    <div onClick={()=>setState({ state, mode:\"울산광역시\"})}>울산</div>\r\n                    <div onClick={()=>setState({ state, mode:\"부산광역시\"})}>부산</div>\r\n                    <div onClick={()=>setState({ state, mode:\"광주광역시\"})}>광주</div>\r\n                </div>\r\n                <div className=\"city\">\r\n                    <div onClick={()=>setState({ state, mode:\"경기도\"})}>경기도</div>\r\n                    <div onClick={()=>setState({ state, mode:\"강원도\"})}>강원도</div>\r\n                    <div onClick={()=>setState({ state, mode:\"충청북도\"})}>충청북도</div>\r\n                    <div onClick={()=>setState({ state, mode:\"충청남도\"})}>충청남도</div>\r\n                    <div onClick={()=>setState({ state, mode:\"경상북도\"})}>경상북도</div>\r\n                    <div onClick={()=>setState({ state, mode:\"경상남도\"})}>경상남도</div>\r\n                    <div onClick={()=>setState({ state, mode:\"전라북도\"})}>전라북도</div>\r\n                    <div onClick={()=>setState({ state, mode:\"전라남도\"})}>전라남도</div>\r\n                    <div onClick={()=>setState({ state, mode:\"제주특별자치도\"})}>제주도</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"Location\">\r\n                <div>\r\n                    {isLoading ? \r\n                        (<div><span>Loading...</span></div> ) : \r\n                        (<div className=\"centers\">\r\n                            {datas.map(data=>(\r\n                            <Menu \r\n                            key={data.id}\r\n                            id={data.id} \r\n                            sido={data.sido}\r\n                            city={state}\r\n                            centerName={data.centerName}\r\n                            facilityName={data.facilityName}\r\n                            zipCode={data.zipCode}\r\n                            address={data.address}\r\n                            centerType={data.centerType}\r\n                            lat={data.lat}\r\n                            lng={data.lng}\r\n                            zom={state.zom}\r\n                            />)) }\r\n                        </div>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","\nimport './App.css';\nimport React from \"react\";\nimport axios from \"axios\";\nimport Navigation from \"./routes/Navigation\";\nimport {HashRouter, Route} from \"react-router-dom\";\nconst KEY = \"IvWsWLdmfiX2Gk3YCwkCMMEagPINpXdfgfhnec0s6HBid05ffim7vLRJZKl%2BrMVXqWa%2BRI20AwUDZ%2FXX5ABEvg%3D%3D\"\nconst PAGE = 204;//최대 204개\n\n\nexport default class App extends React.Component{\n  state  = {\n    isLoading: true, //로딩중\n    covid:null\n  };\n\n  getWeather = async()=>{ //axios가 url 영화정보를 받아올때 까지 실행\n    const {data:{data}}= await axios.get(`https://api.odcloud.kr/api/15077586/v1/centers?page=1&perPage=${PAGE}&GETcenters&serviceKey=${KEY}`); \n    this.setState({\n      isLoading : false,\n      covid:data,\n    });\n  }\n\n  componentDidMount(){ \n    this.getWeather(); //현재위치를 가져오는 함수 호출\n  }\n\n  render(){\n    const {covid, isLoading} = this.state; //this.state.\"\" 를 간소화\n    return (\n      <HashRouter>\n        <Route path=\"/\"  render={() => <Navigation info={covid} isLoading={isLoading}/> }/>\n      </HashRouter>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}