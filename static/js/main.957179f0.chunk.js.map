{"version":3,"sources":["component/Map.js","component/Menu.js","component/Home.js","App.js","index.js"],"names":["kakao","window","Map","lat","lng","zoom","arrLat","arrLng","arrFacilityName","options","center","maps","LatLng","level","useEffect","container","document","getElementById","map","i","length","markers","marker","Marker","position","setMap","infowindows","infowindow","CustomOverlay","content","event","addListener","makeOverListener","makeOutListener","id","className","Menu","sido","city","centerName","facilityName","zipCode","address","centerType","zom","latt","lngg","facilityNamee","useState","mode","state","setState","push","onClick","Home","info","isLoading","datas","areainfo","area","areaArray","Nav","data","App","covid","a","axios","get","ReactDOM","render"],"mappings":"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","file":"static/js/main.957179f0.chunk.js","sourcesContent":["import React, { useEffect} from 'react';\r\nimport './component.css';\r\nconst { kakao } = window;\r\n\r\nexport default function Map({lat, lng, zoom, arrLat, arrLng, arrFacilityName}){\r\n    let options =null; //지도에 대한 옵션\r\n    \r\n    //지역 클릭여부에 따라 지도를 축소 or 확대\r\n    if(zoom===false){\r\n        options = {\r\n            center: new kakao.maps.LatLng(lng, lat ), // 지도의 중심좌표\r\n            level: 10,  // 지도의 확대 레벨\r\n        }\r\n    }else if(zoom===true){\r\n        options = {\r\n            center: new kakao.maps.LatLng(lng, lat ), // 지도의 중심좌표\r\n            level: 5,  // 지도의 확대 레벨\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const container = document.getElementById('map'); //지도가 생성 되는 공간\r\n        const map = new kakao.maps.Map(container, options); //지도 생성\r\n\r\n        //여러개의 마커의 위치와 인포드로우(마커의 정보)를 생성\r\n        //위도배열의 길이 만큼 반복\r\n        for (let i = 0; i < arrLat.length; i++) {\r\n        let markers =  new kakao.maps.LatLng(arrLng[i], arrLat[i] ); //마커의 위치\r\n        let marker = new kakao.maps.Marker({ position : markers}); //마커에 대한 정보\r\n            marker.setMap(map);//마커를 지도에 표시\r\n\r\n        let infowindows = '<div class=\"customoverlay\">' + arrFacilityName[i] + '</div>'; //인포드로우 정의\r\n        let infowindow = new kakao.maps.CustomOverlay({ position: markers, content: infowindows }); //커스텀한 인포드로우에 대한 정보 \r\n        \r\n        //마커에 mouseover, mouseout, click 이벤트를 등록합니다\r\n        // 이벤트 리스너로는 클로저를 만들어 등록합니다 \r\n        // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다\r\n        kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, infowindow));\r\n        kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(infowindow));\r\n        kakao.maps.event.addListener(marker, 'click', makeOverListener(map, marker, infowindow));\r\n        kakao.maps.event.addListener(map, 'click', makeOutListener(infowindow));\r\n        }\r\n        \r\n        //커스텀한 인포윈도우를 표시하는 함수입니다 \r\n        function makeOverListener(map, marker, infowindow) {\r\n            return function() {\r\n                infowindow.setMap(map);\r\n            };\r\n        }\r\n        \r\n        //커스텀한 인포윈도우를 닫는 함수입니다 \r\n        function makeOutListener(infowindow) {\r\n            return function() {\r\n                infowindow.setMap(null); \r\n            };\r\n        }\r\n    }, [lng]);//위치의 값이 바뀔때마다 동작\r\n\r\n    return (\r\n        <div id=\"map\" className=\"map\">\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect }  from \"react\";\r\nimport './component.css';\r\nimport Map from \"./Map\";\r\n\r\nlet arrLat=[100]; //위도배열\r\nlet arrLng=[100]; //경도배열\r\nlet arrFacilityName=[100]; //센터의 시설명 배열\r\n\r\nexport default function Menu({id, sido, city, centerName, facilityName, zipCode, address, centerType, lat, lng, zom}){\r\n    const latt = lat; //위도\r\n    const lngg = lng; //경도\r\n    const facilityNamee =facilityName; //센터의 시설명\r\n    const [ state, setState ] = useState({ \r\n        lat:latt, //위도\r\n        lng:lngg, //경도\r\n        facilityName:facilityNamee, //센터의 시설명\r\n        mode:true, //센터 클릭여부\r\n        zoom:zom, //지역 클릭여부\r\n    }); \r\n\r\n    //화면에 컴포넌트가 마운트된 직후실행\r\n    useEffect(() => {        \r\n        arrLat=[]; //배열을 비움\r\n        arrLng =[]; //배열을 비움\r\n        arrFacilityName =[]; //배열을 비움\r\n    }, [city]); //네비게이션에서 도시를 선택할때마다 실행됨 \r\n\r\n    //동일한 센터를 다시 클릭 하였을때 함수(토글)\r\n    //미세한 위치변경, 센터 클릭여부 변경, \r\n    const toogle=()=>{\r\n        if(state.mode===true){ //동일한 센터를 다시 클릭하면\r\n            setState({...state, lat:lat-0.000001, lng:lng-0.000001, mode:false, zoom:true}) //위치를 미세하게 변경하고 클릭여부를 변경과 지역클릭여부 변경\r\n        }else{\r\n            setState({...state, lat:lat, lng:lng, mode:true, zoom:true}) //위치를 미세하게 변경하고 클릭여부를 변경과 지역클릭여부 변경\r\n        }\r\n    }\r\n\r\n    //예방접종 센터 지역과, 네비게이션에서 선택한 지역과 다르면 \r\n    //전부 비운다\r\n    if(sido !== city){\r\n        sido=null;\r\n        centerName=null;\r\n        facilityName=\"\";\r\n        address=null;\r\n        centerType=null;\r\n        lat=null;\r\n        lng=null;\r\n        return(\r\n            <div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //예방접종 센터 지역과, 네비게이션에서 선택한 지경이 같으면\r\n    //선택한 지역의 센터 목록과 지도를 표시\r\n    if(sido === city){\r\n        arrLat.push(state.lat); //배열에 위도를 추가\r\n        arrLng.push(state.lng); //배열에 경도를 추가\r\n        arrFacilityName.push(state.facilityName); //배열에 센터의 시설명을 추가\r\n        return(\r\n            <div className=\"center\">\r\n                <div className=\"center_info\" onClick={toogle}> \r\n                    <div>\r\n                        <div className=\"centerName\">\r\n                                {centerName} \r\n                            </div>\r\n                            <div className=\"facilityName\">\r\n                                [{facilityName}]\r\n                            </div>\r\n                        </div> \r\n                    </div>\r\n                <div>\r\n                    <Map lat={state.lat} lng={state.lng} zoom={state.zoom} arrLat={arrLat} arrLng={arrLng} arrFacilityName={arrFacilityName}></Map>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}","import React, { useState }  from \"react\";\r\nimport './Home.css';\r\nimport Menu from \"./Menu\"\r\n\r\nexport default function Home({info,isLoading}){\r\n    const datas = info; //코로나19 예방접종 센터 정보\r\n    const [ state, setState ] = useState({ \r\n        mode:null, //areainfo의 area\r\n        zom:false, //지역 클릭여부\r\n    }); \r\n\r\n    //지역 에대한 정보\r\n    const areainfo=[\r\n        {area:\"서울특별시\",city:\"서울\"},\r\n        {area:\"인천광역시\",city:\"인천\"},\r\n        {area:\"세종특별자치시\",city:\"세종\"},\r\n        {area:\"대전광역시\",city:\"대전\"},\r\n        {area:\"대구광역시\",city:\"대구\"},\r\n        {area:\"울산광역시\",city:\"울산\"},\r\n        {area:\"부산광역시\",city:\"부산\"},\r\n        {area:\"광주광역시\",city:\"광주\"},\r\n        {area:\"경기도\",city:\"경기도\"},\r\n        {area:\"강원도\",city:\"강원도\"},\r\n        {area:\"충청북도\",city:\"충청북도\"},\r\n        {area:\"충청남도\",city:\"충청남도\"},\r\n        {area:\"경상북도\",city:\"경상북도\"},\r\n        {area:\"경상남도\",city:\"경상남도\"},\r\n        {area:\"전라북도\",city:\"전라북도\"},\r\n        {area:\"전라남도\",city:\"전라남도\"},\r\n        {area:\"제주특별자치도\",city:\"제주도\"},]\r\n\r\n    let areaArray=[] //지역배열\r\n    for(let i=0; i<areainfo.length; i++){\r\n        areaArray[i] = <div key={i} onClick={()=>setState({ state, mode: areainfo[i].area})}>{areainfo[i].city}</div>\r\n    }\r\n    const Nav = areaArray.map(city=>{return city}); //지역배열을 모두 출력\r\n\r\n    return(\r\n        <div className=\"home\">\r\n            <div className=\"navigation\">\r\n                <div className=\"city\">\r\n                    {Nav}\r\n                </div>\r\n            </div>\r\n            <div className=\"Location\">\r\n                <div>\r\n                    {isLoading ? \r\n                        //로딩중이면 실행\r\n                        (<div><span>Loading...</span></div> ) : \r\n                         //로딩이 끝나면 실행\r\n                        (<div className=\"centers\">\r\n                            {datas.map(data=>(\r\n                            <Menu \r\n                            key={data.id}\r\n                            id={data.id} \r\n                            sido={data.sido}\r\n                            city={state.mode}\r\n                            centerName={data.centerName}\r\n                            facilityName={data.facilityName}\r\n                            zipCode={data.zipCode}\r\n                            address={data.address}\r\n                            centerType={data.centerType}\r\n                            lat={data.lat}\r\n                            lng={data.lng}\r\n                            zom={state.zom}\r\n                            />)) }\r\n                        </div>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Home from \"./component/Home\";\n\nexport default function App(){\n  const KEY = \"IvWsWLdmfiX2Gk3YCwkCMMEagPINpXdfgfhnec0s6HBid05ffim7vLRJZKl%2BrMVXqWa%2BRI20AwUDZ%2FXX5ABEvg%3D%3D\"//공공데이터포럴 키\n  const PAGE = 204;//가져올 최대 정보의 갯수\n  const [ state, setState ] = useState({ \n    isLoading: true, //로딩중\n    covid:null //코로나19 예방접종 센터 정보\n  }); \n\n  //화면에 컴포넌트가 마운트된 직후실행(componentDidMount 함수와 비슷)\n  useEffect(() => {\n    (async()=>{ //async 함수의 실행을 일시 중지하고 코로나19 예방접종 센터 정보 API를 가져오길 기다린 다음 async 함수의 실행을 다시 시작하고 완료후 값을 반환\n      const {data:{data}}= await axios.get(`https://api.odcloud.kr/api/15077586/v1/centers?page=1&perPage=${PAGE}&GETcenters&serviceKey=${KEY}`); \n      setState({...state,   isLoading : false, covid:data }); //코로나19 예방접종 센터 정보를 state에 연결\n    })();\n  },[]);\n\n  return (\n    <div>\n      <Home info={state.covid} isLoading={state.isLoading}/>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}